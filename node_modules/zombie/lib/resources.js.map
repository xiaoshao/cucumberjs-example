{"version":3,"sources":["resources.js"],"names":[],"mappings":"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","file":"resources.js","sourcesContent":["// Retrieve resources (HTML pages, scripts, XHR, etc).\n//\n// If count is unspecified, defaults to at least one.\n//\n// Each browser has a resources objects that allows you to:\n// - Inspect the history of retrieved resources, useful for troubleshooting\n//   issues related to resource loading\n// - Request resources directly, but have Zombie handle cookies,\n//   authentication, etc\n// - Implement new mechanism for retrieving resources, for example, add new\n//   protocols or support new headers\n\n\nconst assert      = require('assert');\nconst Bluebird    = require('bluebird');\nconst DOM         = require('./dom');\nconst File        = require('fs');\nconst HTTP        = require('http');\nconst iconv       = require('iconv-lite');\nconst Path        = require('path');\nconst QS          = require('querystring');\nconst request     = require('request');\nconst URL         = require('url');\nconst Utils       = require('jsdom/lib/jsdom/utils');\nconst Zlib        = require('zlib');\n\n\n// Each browser has a resources object that provides the means for retrieving\n// resources and a list of all retrieved resources.\n//\n// The object is an array, and its elements are the resources.\nclass Resources extends Array {\n\n  constructor(browser) {\n    this.browser  = browser;\n    this.pipeline = Resources.pipeline.slice();\n  }\n\n\n  // Make an HTTP request (also supports file: protocol).\n  //\n  // method    - Request method (GET, POST, etc)\n  // url       - Request URL\n  // options   - See below\n  // callback  - Called with error, or null and response\n  //\n  // Without callback, returns a promise.\n  //\n  // Options:\n  //   headers   - Name/value pairs of headers to send in request\n  //   params    - Parameters to pass in query string or document body\n  //   body      - Request document body\n  //   timeout   - Request timeout in milliseconds (0 or null for no timeout)\n  //\n  // Response contains:\n  //   url         - Actual resource URL (changed by redirects)\n  //   statusCode  - Status code\n  //   statusText  - HTTP status text (\"OK\", \"Not Found\" etc)\n  //   headers     - Response headers\n  //   body        - Response body\n  //   redirects   - Number of redirects followed\n  request(method, url, options = {}, callback = null) {\n    if (!callback && typeof options === 'function')\n      [options, callback] = [{}, options];\n\n    const req = {\n      method:     method.toUpperCase(),\n      url:        url,\n      headers:    options.headers || {},\n      params:     options.params,\n      body:       options.body,\n      time:       Date.now(),\n      timeout:    options.timeout || 0,\n      strictSSL:  this.browser.strictSSL,\n      localAddress: this.browser.localAddress || 0\n    };\n\n    const resource = {\n      request:    req,\n      target:     options.target\n    };\n    this.push(resource);\n    this.browser.emit('request', req);\n\n    const promise = new Bluebird((resolve, reject)=> {\n      this.runPipeline(req, (error, res)=> {\n        if (error) {\n          resource.error = error;\n          reject(error);\n        } else {\n          res.url           = res.url || req.url;\n          res.statusCode    = res.statusCode || 200;\n          res.statusText    = HTTP.STATUS_CODES[res.statusCode] || 'Unknown';\n          res.headers       = res.headers || {};\n          res.redirects     = res.redirects || 0;\n          res.time          = Date.now();\n          resource.response = res;\n\n          this.browser.emit('response', req, res);\n          resolve(resource.response);\n        }\n      });\n    });\n\n    if (callback)\n      promise.done((res)=> callback(null, res), callback);\n    else\n      return promise;\n  }\n\n\n  // GET request.\n  //\n  // url       - Request URL\n  // options   - See request() method\n  // callback  - Called with error, or null and response\n  get(url, options, callback) {\n    return this.request('get', url, options, callback);\n  }\n\n  // POST request.\n  //\n  // url       - Request URL\n  // options   - See request() method\n  // callback  - Called with error, or null and response\n  post(url, options, callback) {\n    return this.request('post', url, options, callback);\n  }\n\n\n  // Human readable resource listing.\n  //\n  // output - Write to this stream (optional)\n  dump(output = process.stdout) {\n    if (this.length === 0) {\n      output.write('No resources\\n');\n      return;\n    }\n\n    for (let resource of this) {\n      const { request, response, error, target } = resource;\n      // Write summary request/response header\n      if (response)\n        output.write(`${request.method} ${response.url} - ${response.statusCode} ${response.statusText} - ${response.time - request.time}ms\\n`);\n      else\n        output.write(`${resource.request.method} ${resource.request.url}\\n`);\n\n      // Tell us which element/document is loading this.\n      if (target instanceof DOM.Document)\n        output.write('  Loaded as HTML document\\n');\n      else if (target && target.id)\n        output.write(`  Loading by element #${target.id}\\n`);\n      else if (target)\n        output.write(`  Loading as ${target.tagName} element\\n`);\n\n      // If response, write out response headers and sample of document entity\n      // If error, write out the error message\n      // Otherwise, indicate this is a pending request\n      if (response) {\n        if (response.redirects)\n          output.write(`  Followed ${response.redirects} redirects\\n`);\n        for (let name in response.headers) {\n          let value = response.headers[name];\n          output.write(`  ${name}: ${value}\\n`);\n        }\n        output.write('\\n');\n        const sample = response.body\n          .slice(0, 250)\n          .toString('utf8')\n          .split('\\n')\n          .map(line => `  ${line}`)\n          .join('\\n');\n        output.write(sample);\n      } else if (error)\n        output.write(`  Error: ${error.message}\\n`);\n      else\n        output.write(`  Pending since ${new Date(request.time)}\\n`);\n      // Keep them separated\n      output.write('\\n\\n');\n    }\n  }\n\n\n  // Add a request/response handler.  This handler will only be used by this\n  // browser.\n  addHandler(handler) {\n    assert(handler.call, 'Handler must be a function');\n    assert(handler.length === 2 || handler.length === 3, 'Handler function takes 2 (request handler) or 3 (reponse handler) arguments');\n    this.pipeline.push(handler);\n  }\n\n  // Processes the request using the pipeline.\n  runPipeline(req, callback) {\n    const { browser } = this;\n    const requestHandlers = this.pipeline\n      .filter(fn => fn.length === 2)\n      .concat(Resources.makeHTTPRequest);\n    const responseHandlers = this.pipeline\n      .filter(fn => fn.length === 3);\n\n    let res = null;\n    // Called to execute the next request handler.\n    function nextRequestHandler(error, responseFromHandler) {\n      if (error) {\n        callback(error);\n        return;\n      }\n\n      if (responseFromHandler) {\n        // Received response, switch to processing request\n        res = responseFromHandler;\n        // If we get redirected and the final handler doesn't provide a URL (e.g.\n        // mock response), then without this we end up with the original URL.\n        res.url = res.url || req.url;\n        nextResponseHandler();\n      } else {\n        // Use the next request handler.\n        const handler = requestHandlers.shift();\n        try {\n          handler.call(browser, req, nextRequestHandler);\n        } catch (error) {\n          callback(error);\n        }\n      }\n    }\n\n    // Called to execute the next response handler.\n    function nextResponseHandler(error, responseFromHandler) {\n      if (error) {\n        callback(error);\n        return;\n      }\n\n      if (responseFromHandler)\n        res = responseFromHandler;\n\n      const handler = responseHandlers.shift();\n      if (handler)\n        // Use the next response handler\n        try {\n          handler.call(browser, req, res, nextResponseHandler);\n        } catch (error) {\n          callback(error);\n        }\n      else\n        // No more handlers, callback with response.\n        callback(null, res);\n    }\n\n    // Start with first request handler\n    nextRequestHandler();\n  }\n\n}\n\n\n\n// -- Handlers\n\n// Add a request/response handler.  This handler will be used in all browsers.\nResources.addHandler = function(handler) {\n  assert(handler.call, 'Handler must be a function');\n  assert(handler.length === 2 || handler.length === 3, 'Handler function takes 2 (request handler) or 3 (response handler) arguments');\n  this.pipeline.push(handler);\n};\n\n\n// This handler normalizes the request URL.\n//\n// It turns relative URLs into absolute URLs based on the current document URL\n// or base element, or if no document open, based on browser.site property.\n//\n// Also creates query string from request.params for\n// GET/HEAD/DELETE requests.\nResources.normalizeURL = function(req, next) {\n  if (this.document)\n  // Resolve URL relative to document URL/base, or for new browser, using\n  // Browser.site\n    req.url = DOM.resourceLoader.resolve(this.document, req.url);\n  else\n    req.url = Utils.resolveHref(this.site || 'http://localhost', req.url);\n\n  if (req.params) {\n    const { method } = req;\n    if (method === 'GET' || method === 'HEAD' || method === 'DELETE') {\n      // These methods use query string parameters instead\n      const uri = URL.parse(req.url, true);\n      Object.assign(uri.query, req.params);\n      req.url = URL.format(uri);\n    }\n  }\n\n  next();\n};\n\n\n// This handler mergers request headers.\n//\n// It combines headers provided in the request with custom headers defined by\n// the browser (user agent, authentication, etc).\n//\n// It also normalizes all headers by down-casing the header names.\nResources.mergeHeaders = function(req, next) {\n  // Header names are down-cased and over-ride default\n  const headers = {\n    'user-agent':       this.userAgent\n  };\n\n  // Merge custom headers from browser first, followed by request.\n  for (let name in this.headers) {\n    headers[name.toLowerCase()] = this.headers[name];\n  }\n  if (req.headers)\n    for (let name in req.headers)\n      headers[name.toLowerCase()] = req.headers[name];\n\n  const { host } = URL.parse(req.url);\n\n  // Depends on URL, don't allow over-ride.\n  headers.host = host;\n\n  // HTTP Basic authentication\n  const authenticate = { host, username: null, password: null };\n  this.emit('authenticate', authenticate);\n  const { username, password } = authenticate;\n  if (username && password) {\n    this.log(`Authenticating as ${username}:${password}`);\n    const base64 = new Buffer(`${username}:${password}`).toString('base64');\n    headers.authorization = `Basic ${base64}`;\n  }\n\n  req.headers = headers;\n  next();\n};\n\n\nfunction formData(name, value) {\n  if (value.read) {\n    const buffer = value.read();\n    return {\n      'Content-Disposition':  `form-data; name=\\\"${name}\\\"; filename=\\\"${value}\\\"`,\n      'Content-Type':         value.mime || 'application/octet-stream',\n      'Content-Length':       buffer.length,\n      body:                   buffer\n    };\n  } else\n    return {\n      'Content-Disposition':  `form-data; name=\\\"${name}\\\"`,\n      'Content-Type':         'text/plain; charset=utf8',\n      'Content-Length':       value.length,\n      body:                   value\n    };\n}\n\n\n// Depending on the content type, this handler will create a request body from\n// request.params, set request.multipart for uploads.\nResources.createBody = function(req, next) {\n  const { method } = req;\n  if (method !== 'POST' && method !== 'PUT') {\n    next();\n    return;\n  }\n\n  const { headers } = req;\n  // These methods support document body.  Create body or multipart.\n  headers['content-type'] = headers['content-type'] || 'application/x-www-form-urlencoded';\n  const mimeType = headers['content-type'].split(';')[0];\n  if (req.body) {\n    next();\n    return;\n  }\n\n  const params = req.params || {};\n  switch (mimeType) {\n    case 'application/x-www-form-urlencoded': {\n      req.body = QS.stringify(params);\n      headers['content-length'] = req.body.length;\n      next();\n      break;\n    }\n\n    case 'multipart/form-data': {\n      if (Object.keys(params).length === 0) {\n        // Empty parameters, can't use multipart\n        headers['content-type'] = 'text/plain';\n        req.body = '';\n      } else {\n\n        const boundary = `${new Date().getTime()}.${Math.random()}`;\n        headers['content-type'] += `; boundary=${boundary}`;\n        req.multipart = Object.keys(params)\n          .reduce((parts, name)=> {\n            const values = params[name]\n              .map(value => formData(name, value) );\n            return parts.concat(values);\n          }, []);\n      }\n      next();\n      break;\n    }\n\n    case 'text/plain': {\n      // XHR requests use this by default\n      next();\n      break;\n    }\n\n    default: {\n      next(new Error(`Unsupported content type ${mimeType}`));\n      break;\n    }\n  }\n};\n\n\n\nResources.handleHTTPResponse = function(req, res, next) {\n  res.headers = res.headers || {};\n\n  const { protocol, hostname, pathname } = URL.parse(req.url);\n  if (protocol !== 'http:' && protocol !== 'https:') {\n    next();\n    return;\n  }\n\n  // Set cookies from response\n  const setCookie = res.headers['set-cookie'];\n  if (setCookie)\n    this.cookies.update(setCookie, hostname, pathname);\n\n  // Number of redirects so far.\n  let redirects   = req.redirects || 0;\n  let redirectUrl = null;\n\n  // Determine whether to automatically redirect and which method to use\n  // based on the status code\n  const { statusCode } = res;\n  if ((statusCode === 301 || statusCode === 307) &&\n      (req.method === 'GET' || req.method === 'HEAD'))\n    // Do not follow POST redirects automatically, only GET/HEAD\n    redirectUrl = Utils.resolveHref(req.url, res.headers.location || '');\n  else if (statusCode === 302 || statusCode === 303)\n    // Follow redirect using GET (e.g. after form submission)\n    redirectUrl = Utils.resolveHref(req.url, res.headers.location || '');\n\n  if (redirectUrl) {\n\n    res.url = redirectUrl;\n    // Handle redirection, make sure we're not caught in an infinite loop\n    ++redirects;\n    if (redirects > this.maxRedirects) {\n      next(new Error(`More than ${this.maxRedirects} redirects, giving up`));\n      return;\n    }\n\n    const redirectHeaders = Object.assign({}, req.headers);\n    // This request is referer for next\n    redirectHeaders.referer = req.url;\n    // These headers exist in POST request, do not pass to redirect (GET)\n    delete redirectHeaders['content-type'];\n    delete redirectHeaders['content-length'];\n    delete redirectHeaders['content-transfer-encoding'];\n    // Redirect must follow the entire chain of handlers.\n    const redirectRequest = {\n      method:     'GET',\n      url:        res.url,\n      headers:    redirectHeaders,\n      redirects:  redirects,\n      strictSSL:  req.strictSSL,\n      time:       req.time,\n      timeout:    req.timeout\n    };\n    this.emit('redirect', req, res, redirectRequest);\n    this.resources.runPipeline(redirectRequest, next);\n\n  } else {\n    res.redirects = redirects;\n    next();\n  }\n};\n\n\n// Handle deflate and gzip transfer encoding.\nResources.decompressBody = function(req, res, next) {\n  const transferEncoding  = res.headers['transfer-encoding'];\n  const contentEncoding   = res.headers['content-encoding'];\n  if (contentEncoding === 'deflate' || transferEncoding === 'deflate')\n    Zlib.inflate(res.body, (error, buffer)=> {\n      res.body = buffer;\n      next(error);\n    });\n  else if (contentEncoding === 'gzip' || transferEncoding === 'gzip')\n    Zlib.gunzip(res.body, (error, buffer)=> {\n      res.body = buffer;\n      next(error);\n    });\n  else\n    next();\n};\n\n\n// Find the charset= value of the meta tag\nconst MATCH_CHARSET = /<meta(?!\\s*(?:name|value)\\s*=)[^>]*?charset\\s*=[\\s\"']*([^\\s\"'\\/>]*)/i;\n\n// This handler decodes the response body based on the response content type.\nResources.decodeBody = function(req, res, next) {\n  if (!Buffer.isBuffer(res.body)) {\n    next();\n    return;\n  }\n\n  // If Content-Type header specifies charset, use that\n  const contentType = res.headers['content-type'] || 'application/unknown';\n  const [mimeType, ...typeOptions]  = contentType.split(/;\\s*/);\n  const [type, subtype]             = contentType.split(/\\//, 2);\n\n  // Images, binary, etc keep response body a buffer\n  if (type && type !== 'text') {\n    next();\n    return;\n  }\n\n  let charset = null;\n\n  // Pick charset from content type\n  if (mimeType)\n    for (let typeOption of typeOptions) {\n      if (/^charset=/i.test(typeOption)) {\n        charset = typeOption.split('=')[1];\n        break;\n      }\n    }\n\n  // Otherwise, HTML documents only, pick charset from meta tag\n  // Otherwise, HTML documents only, default charset in US is windows-1252\n  const isHTML = /html/.test(subtype) || /\\bhtml\\b/.test(req.headers.accept);\n  if (!charset && isHTML) {\n    const match = res.body.toString().match(MATCH_CHARSET);\n    charset = match ? match[1] : 'windows-1252';\n  }\n\n  if (charset)\n    res.body = iconv.decode(res.body, charset);\n  next();\n};\n\n\n// All browsers start out with this list of handler.\nResources.pipeline = [\n  Resources.normalizeURL,\n  Resources.mergeHeaders,\n  Resources.createBody,\n  Resources.handleHTTPResponse,\n  Resources.decompressBody,\n  Resources.decodeBody\n];\n\n\n// -- Make HTTP request\n\n\n// Used to perform HTTP request (also supports file: resources).  This is always\n// the last request handler.\nResources.makeHTTPRequest = function(req, callback) {\n  const { protocol, hostname, pathname } = URL.parse(req.url);\n  if (protocol === 'file:') {\n\n    // If the request is for a file:// descriptor, just open directly from the\n    // file system rather than getting node's http (which handles file://\n    // poorly) involved.\n    if (req.method !== 'GET') {\n      callback(null, { statusCode: 405 });\n      return;\n    }\n\n    const filename = Path.normalize(decodeURI(pathname));\n    File.exists(filename, function(exists) {\n      if (exists)\n        File.readFile(filename, function(error, buffer) {\n          // Fallback with error -> callback\n          if (error) {\n            req.error = error;\n            callback(error);\n          } else\n            callback(null, { body: buffer });\n        });\n      else\n        callback(null, { statusCode: 404 });\n    });\n\n  } else {\n\n    // We're going to use cookies later when recieving response.\n    const { cookies } = this;\n    req.headers.cookie = cookies.serialize(hostname, pathname);\n\n    const httpRequest = {\n      method:         req.method,\n      url:            req.url,\n      headers:        req.headers,\n      body:           req.body,\n      multipart:      req.multipart,\n      proxy:          this.proxy,\n      jar:            false,\n      followRedirect: false,\n      encoding:       null,\n      strictSSL:      req.strictSSL,\n      localAddress:   req.localAddress || 0,\n      timeout:        req.timeout || 0\n    };\n\n    request(httpRequest, function(error, res) {\n      if (error)\n        callback(error);\n      else\n        callback(null, {\n          url:          req.url,\n          statusCode:   res.statusCode,\n          headers:      res.headers,\n          body:         res.body,\n          redirects:    req.redirects || 0\n        });\n    });\n\n\n  }\n\n};\n\n\nmodule.exports = Resources;\n\n"],"sourceRoot":"/source/"}