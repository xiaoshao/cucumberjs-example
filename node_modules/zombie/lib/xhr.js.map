{"version":3,"sources":["xhr.js"],"names":[],"mappings":"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","file":"xhr.js","sourcesContent":["// Implemenets XMLHttpRequest.\n// See http://www.w3.org/TR/XMLHttpRequest/#the-abort()-method\n\n\nconst DOM     = require('./dom');\nconst Fetch   = require('./fetch');\nconst ms      = require('ms');\nconst URL     = require('url');\nconst Utils   = require('jsdom/lib/jsdom/utils');\n\n\nconst { DOMException } = DOM;\n\n\nclass XMLHttpRequest extends DOM.EventTarget {\n\n  constructor(window) {\n    super();\n    this._window      = window;\n    this._browser     = window.browser;\n    // Pending request\n    this._pending     = null;\n    // Response headers\n    this.readyState   = XMLHttpRequest.UNSENT;\n\n    this.onreadystatechange = null;\n    this.timeout      = 0;\n\n    // XHR events need the first to dispatch, the second to propagate up to window\n    this._ownerDocument = window.document;\n  }\n\n\n  // Aborts the request if it has already been sent.\n  abort() {\n    const request = this._pending;\n    const sent    = !!request;\n    if (this.readyState === XMLHttpRequest.UNSENT || (this.readyState === XMLHttpRequest.OPENED && !sent)) {\n      this.readyState = XMLHttpRequest.UNSENT;\n      return;\n    }\n    // Tell any pending request it has been aborted.\n    request.aborted = true;\n    this._response  = null;\n    this._error     = null;\n    this._pending   = null;\n  }\n\n\n  // Initializes a request.\n  //\n  // Calling this method an already active request (one for which open()or\n  // openRequest()has already been called) is the equivalent of calling abort().\n  open(method, url, useAsync, user, password) { // jshint ignore:line\n    if (useAsync === false)\n      throw new DOMException(DOMException.NOT_SUPPORTED_ERR, 'Zombie does not support synchronous XHR requests');\n\n    // Abort any pending request.\n    this.abort();\n\n    // Check supported HTTP method\n    this._method = method.toUpperCase();\n    if (/^(CONNECT|TRACE|TRACK)$/.test(this._method))\n      throw new DOMException(DOMException.SECURITY_ERR, 'Unsupported HTTP method');\n    if (!/^(DELETE|GET|HEAD|OPTIONS|POST|PUT)$/.test(this._method))\n      throw new DOMException(DOMException.SYNTAX_ERR, 'Unsupported HTTP method');\n\n    const headers = new Fetch.Headers();\n\n    // Normalize the URL and check security\n    url = URL.parse(Utils.resolveHref(this._window.location.href, url));\n    // Don't consider port if they are standard for http and https\n    if ((url.protocol === 'https:' && url.port === '443') ||\n        (url.protocol === 'http:'  && url.port === '80'))\n      delete url.port;\n\n    if (!/^https?:$/i.test(url.protocol))\n      throw new DOMException(DOMException.NOT_SUPPORTED_ERR, 'Only HTTP/S protocol supported');\n    url.hostname = url.hostname || this._window.location.hostname;\n    url.host = url.port ? `${url.hostname}:${url.port}` : url.hostname;\n    if (url.host !== this._window.location.host) {\n      headers.set('Origin', `${this._window.location.protocol}//${this._window.location.host}`);\n      this._cors = headers.get('Origin');\n    }\n    url.hash = null;\n    if (user)\n      url.auth = `${user}:${password}`;\n    // Used for logging requests\n    this._url       = URL.format(url);\n    this._headers   = headers;\n\n    // Reset response status\n    this._stateChanged(XMLHttpRequest.OPENED);\n  }\n\n\n  // Sets the value of an HTTP request header.You must call setRequestHeader()\n  // after open(), but before send().\n  setRequestHeader(header, value) {\n    if (this.readyState !== XMLHttpRequest.OPENED)\n      throw new DOMException(DOMException.INVALID_STATE_ERR,  'Invalid state');\n    this._headers.set(header, value);\n  }\n\n\n  // Sends the request. If the request is asynchronous (which is the default),\n  // this method returns as soon as the request is sent. If the request is\n  // synchronous, this method doesn't return until the response has arrived.\n  send(data) {\n    // Request must be opened.\n    if (this.readyState !== XMLHttpRequest.OPENED)\n      throw new DOMException(DOMException.INVALID_STATE_ERR,  'Invalid state');\n\n    const request = new Fetch.Request(this._url, {\n      method:   this._method,\n      headers:  this._headers,\n      body:     data\n    });\n    this._pending = request;\n    this._fire('loadstart');\n\n    const timeout = setTimeout(()=> {\n      if (this._pending === request)\n        this._pending = null;\n      request.timedOut = true;\n\n      this._stateChanged(XMLHttpRequest.DONE);\n      this._fire('progress');\n      this._error = new DOMException(DOMException.TIMEOUT_ERR, 'The request timed out');\n      this._fire('timeout', this._error);\n      this._fire('loadend');\n      this._browser.errors.push(this._error);\n    }, this.timeout || ms('2m'));\n\n    this._window._eventQueue.http(request, (error, response)=> {\n      // Request already timed-out, nothing to do\n      if (request.timedOut)\n        return;\n      clearTimeout(timeout);\n\n      if (this._pending === request)\n        this._pending = null;\n\n      // Request aborted\n      if (request.aborted) {\n        this._stateChanged(XMLHttpRequest.DONE);\n        this._fire('progress');\n        this._error = new DOMException(DOMException.ABORT_ERR, 'Request aborted');\n        this._fire('abort', this._error);\n        return;\n      }\n\n      // If not aborted, then we look at networking error\n      if (error) {\n        this._stateChanged(XMLHttpRequest.DONE);\n        this._fire('progress');\n        this._error = new DOMException(DOMException.NETWORK_ERR);\n        this._fire('error', this._error);\n        this._fire('loadend');\n        this._browser.errors.push(this._error);\n        return;\n      }\n\n      // CORS request, check origin, may lead to new error\n      if (this._cors) {\n        const allowedOrigin = response.headers.get('Access-Control-Allow-Origin');\n        if (!(allowedOrigin === '*' || allowedOrigin === this._cors)) {\n          this._error = new DOMException(DOMException.SECURITY_ERR, 'Cannot make request to different domain');\n          this._browser.errors.push(this._error);\n          this._stateChanged(XMLHttpRequest.DONE);\n          this._fire('progress');\n          this._fire('error', this._error);\n          this._fire('loadend');\n          this.raise('error', this._error.message, { exception: this._error });\n          return;\n        }\n      }\n\n      // Store the response so getters have acess access it\n      this._response        = response;\n      // We have a one-stop implementation that goes through all the state\n      // transitions\n      this._stateChanged(XMLHttpRequest.HEADERS_RECEIVED);\n      this._stateChanged(XMLHttpRequest.LOADING);\n\n      const done = this._window._eventQueue.waitForCompletion();\n      response.text().then(text => {\n        this.responseText = text;\n        this._stateChanged(XMLHttpRequest.DONE);\n\n        this._fire('progress');\n        this._fire('load');\n        this._fire('loadend');\n        done();\n      });\n\n\n    });\n    request.sent = true;\n  }\n\n\n  get status() {\n    // Status code/headers available immediatly, 0 if request errored\n    return this._response ? this._response.status :\n           this._error    ? 0 : null;\n  }\n\n  get statusText() {\n    // Status code/headers available immediatly, '' if request errored\n    return this._response ? this._response.statusText :\n           this._error    ? '' : null;\n  }\n\n  get responseXML() {\n    // Not implemented yet\n    return null;\n  }\n\n  getResponseHeader(name) {\n    // Returns the string containing the text of the specified header, or null if\n    // either the response has not yet been received or the header doesn't exist in\n    // the response.\n    return this._response && this._response.headers.get(name) || null;\n  }\n\n  getAllResponseHeaders() {\n    // Returns all the response headers as a string, or null if no response has\n    // been received. Note: For multipart requests, this returns the headers from\n    // the current part of the request, not from the original channel.\n    if (this._response)\n      // XHR's getAllResponseHeaders, against all reason, returns a multi-line\n      // string.  See http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders-method\n      return this._response.headers.toString();\n    else\n      return null;\n  }\n\n\n  // Fire onreadystatechange event\n  _stateChanged(newState) {\n    this.readyState = newState;\n    this._fire('readystatechange');\n  }\n\n  // Fire the named event on this object\n  _fire(eventName, error) {\n    const event = new DOM.Event('xhr');\n    event.initEvent(eventName, true, true);\n    event.error = error;\n    this.dispatchEvent(event);\n    this._browser.emit('xhr', eventName, this._url);\n  }\n\n  // Raise error coming from jsdom\n  raise(type, message, data) {\n    this._ownerDocument.raise(type, message, data);\n  }\n\n}\n\n\n// Lifecycle states\nXMLHttpRequest.UNSENT           = 0;\nXMLHttpRequest.OPENED           = 1;\nXMLHttpRequest.HEADERS_RECEIVED = 2;\nXMLHttpRequest.LOADING          = 3;\nXMLHttpRequest.DONE             = 4;\n\nmodule.exports = XMLHttpRequest;\n\n"],"sourceRoot":"/source/"}