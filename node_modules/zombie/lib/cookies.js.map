{"version":3,"sources":["cookies.js"],"names":[],"mappings":"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","file":"cookies.js","sourcesContent":["// See [RFC 2109](http://tools.ietf.org/html/rfc2109.html) and\n// [document.cookie](http://dev/loper.mozilla.org/en/document.cookie)\nconst DOM         = require('./dom');\nconst { isArray } = require('util');\nconst Tough       = require('tough-cookie');\nconst { Cookie }  = Tough;\n\n\n// Lists all available cookies.\nmodule.exports = class Cookies extends Array {\n\n  // Used to dump state to console (debugging)\n  dump(output = process.stdout) {\n    for (let cookie of this.sort(Tough.cookieCompare))\n      output.write(`${cookie}\\n`);\n  }\n\n  // Serializes all selected cookies into a single string.  Used to generate a cookies header.\n  //\n  // domain - Request hostname\n  // path   - Request pathname\n  serialize(domain, path) {\n    return this\n      .select({ domain: domain, path: path })\n      .map(cookie => cookie.cookieString())\n      .join('; ');\n  }\n\n  // Returns all cookies that match the identifier (name, domain and path).\n  // This is used for retrieving cookies.\n  select(identifier) {\n    let cookies = this.filter(cookie => cookie.TTL() > 0);\n    if (identifier.name)\n      cookies = cookies.filter(cookie => cookie.key === identifier.name);\n    if (identifier.path)\n      cookies = cookies.filter(cookie => Tough.pathMatch(identifier.path, cookie.path));\n    if (identifier.domain)\n      cookies = cookies.filter(cookie => Tough.domainMatch(identifier.domain, cookie.domain));\n    return cookies\n      .sort((a, b)=> b.domain.length - a.domain.length)\n      .sort(Tough.cookieCompare);\n  }\n\n  // Adds a new cookie, updates existing cookie (same name, domain and path), or\n  // deletes a cookie (if expires in the past).\n  set(params) {\n    const cookie = new Cookie({\n      key:    params.name,\n      value:  params.value,\n      domain: params.domain || 'localhost',\n      path:   params.path || '/'\n    });\n    if (params.expires)\n      cookie.setExpires(params.expires);\n    else if (params.hasOwnProperty('max-age'))\n      cookie.setMaxAge(params['max-age']);\n    cookie.secure   = !!params.secure;\n    cookie.httpOnly = !!params.httpOnly;\n\n    // Delete cookie before setting it, so we only store one cookie (per\n    // domain/path/name)\n    this\n      .filter(c   => c.domain === cookie.domain)\n      .filter(c   => c.path === cookie.path)\n      .filter(c   => c.key === cookie.key)\n      .forEach(c  => this.delete(c));\n    if (cookie.TTL() > 0)\n      this.push(cookie);\n  }\n\n  // Delete the specified cookie.\n  delete(cookie) {\n    const index = this.indexOf(cookie);\n    if (~index)\n      this.splice(index, 1);\n  }\n\n  // Deletes all cookies.\n  deleteAll() {\n    this.length = 0;\n  }\n\n  // Update cookies with HTTP response\n  //\n  // httpHeader - Value of HTTP Set-Cookie header (string/array)\n  // domain     - Set from hostname\n  // path       - Set from pathname\n  update(httpHeader, domain, path) {\n    // One Set-Cookie is a string, multiple is an array\n    const cookies = isArray(httpHeader) ? httpHeader : [httpHeader];\n    cookies\n      .map(cookie => Cookie.parse(cookie))\n      .filter(cookie => cookie)\n      .forEach(cookie => {\n        cookie.domain = cookie.domain || domain;\n        cookie.path   = cookie.path || Tough.defaultPath(path);\n\n        // Delete cookie before setting it, so we only store one cookie (per\n        // domain/path/name)\n        this\n          .filter(c   => c.domain === cookie.domain)\n          .filter(c   => c.path === cookie.path)\n          .filter(c   => c.key === cookie.key)\n          .forEach(c  => this.delete(c));\n        if (cookie.TTL() > 0)\n          this.push(cookie);\n      });\n  }\n\n};\n\n\n// Returns name=value pairs\nDOM.HTMLDocument.prototype.__defineGetter__('cookie', function() {\n  const { cookies } = this.window.browser;\n  return cookies\n    .select({ domain: this.location.hostname, path: this.location.pathname })\n    .filter(cookie => !cookie.httpOnly)\n    .map(cookie    => `${cookie.key}=${cookie.value}`)\n    .join('; ');\n});\n\n// Accepts serialized form (same as Set-Cookie header) and updates cookie from\n// new values.\nDOM.HTMLDocument.prototype.__defineSetter__('cookie', function(cookie) {\n  const { cookies } = this.window.browser;\n  cookies.update(cookie.toString(), this.location.hostname, this.location.pathname);\n});\n"],"sourceRoot":"/source/"}