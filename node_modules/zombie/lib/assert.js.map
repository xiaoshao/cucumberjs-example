{"version":3,"sources":["assert.js"],"names":[],"mappings":"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","file":"assert.js","sourcesContent":["// Browser assertions convenience.\n\nconst assert        = require('assert');\nconst { isRegExp }  = require('util');\nconst URL           = require('url');\nconst Utils         = require('jsdom/lib/jsdom/utils');\n\n\n// Used to assert that actual matches expected value, where expected may be a function or a string.\nfunction assertMatch(actual, expected, message) {\n  if (isRegExp(expected))\n    assert(expected.test(actual), message || `Expected '${actual}' to match ${expected}`);\n  else if (typeof expected === 'function')\n    assert(expected(actual), message);\n  else\n    assert.deepEqual(actual, expected, message);\n}\n\n\nmodule.exports = class Assert {\n\n  constructor(browser) {\n    this.browser = browser;\n  }\n\n\n  // -- Location/response --\n\n  // Asserts that a cookie with the given name has the expected value.\n  //\n  // identifier - Cookie name or name/domain/path (see getCookie)\n  // expected   - Expected value (null to test cookie is not set)\n  // message    - Assert message if cookie does not have expected value\n  cookie(identifier, expected = null, message = null) {\n    const actual = this.browser.getCookie(identifier);\n    assertMatch(actual, expected,\n                message || `Expected cookie ${JSON.stringify(identifier)} to have the value '${expected}', found '${actual}'`);\n  }\n\n  // Asserts that browser was redirected when retrieving the current page.\n  redirected(message) {\n    assert(this.browser.redirected, message);\n  }\n\n  // Assert that the last page load returned the expected status code.\n  status(code, message) {\n    assert.equal(this.browser.statusCode, code, message);\n  }\n\n  // Assert that the last page load returned status code 200.\n  success(message) {\n    assert(this.browser.success, message);\n  }\n\n  // Asserts that current page has the expected URL.\n  //\n  // Expected value can be a String, RegExp, Function or an object, in which case\n  // object properties are tested against the actual URL (e.g. pathname, host,\n  // query).\n  url(expected, message) {\n    if (typeof expected === 'string') {\n      const absolute = Utils.resolveHref(this.browser.location.href, expected);\n      assertMatch(this.browser.location.href, absolute, message);\n    } else if (isRegExp(expected) || typeof expected === 'function')\n      assertMatch(this.browser.location.href, expected, message);\n    else {\n      const url = URL.parse(this.browser.location.href, true);\n      for (let key in expected) {\n        let value = expected[key];\n        // Gracefully handle default values, e.g. document.location.hash for\n        // \"/foo\" is \"\" not null, not undefined.\n        let defaultValue = (key === 'port') ? 80 : null;\n        assertMatch(url[key] || defaultValue, value || defaultValue, message);\n      }\n    }\n  }\n\n\n  // -- Document contents --\n\n  // Assert the named attribute of the selected element(s) has the expected value.\n  attribute(selector, name, expected = null, message = null) {\n    const elements = this.browser.queryAll(selector);\n    assert(elements.length, `Expected selector '${selector}' to return one or more elements`);\n    for (let element of elements) {\n      let actual = element.getAttribute(name);\n      assertMatch(actual, expected, message);\n    }\n  }\n\n  // Assert that element matching selector exists.\n  element(selector, message) {\n    this.elements(selector, { exactly: 1 }, message);\n  }\n\n  // Assert how many elements matching selector exist.\n  //\n  // Count can be an exact number, or an object with the properties:\n  // atLeast - Expect to find at least that many elements\n  // atMost  - Expect to find at most that many elements\n  // exactly - Expect to find exactly that many elements\n  //\n  // If count is unspecified, defaults to at least one.\n  elements(selector, count, message) {\n    const elements = this.browser.queryAll(selector);\n    if (arguments.length === 1)\n      this.elements(selector, { atLeast: 1});\n    else if (Number.isInteger(count))\n      this.elements(selector, { exactly: count }, message);\n    else {\n      if (count.exactly)\n        assert.equal(elements.length, count.exactly,\n                     message || `Expected ${count.exactly} elements matching '${selector}', found ${elements.length}`);\n      if (count.atLeast)\n        assert(elements.length >= count.atLeast,\n               message || `Expected at least ${count.atLeast} elements matching '${selector}', found only ${elements.length}`);\n      if (count.atMost)\n        assert(elements.length <= count.atMost,\n               message || `Expected at most ${count.atMost} elements matching '${selector}', found ${elements.length}`);\n    }\n  }\n\n  // Asserts the selected element(s) has the expected CSS class.\n  hasClass(selector, expected, message) {\n    const elements = this.browser.queryAll(selector);\n    assert(elements.length, `Expected selector '${selector}' to return one or more elements`);\n    for (let element of elements) {\n      let classNames = element.className.split(/\\s+/);\n      assert(~classNames.indexOf(expected),\n             message || `Expected element '${selector}' to have class ${expected}, found ${classNames.join(', ')}`);\n    }\n  }\n\n  // Asserts the selected element(s) doest not have the expected CSS class.\n  hasNoClass(selector, expected, message) {\n    const elements = this.browser.queryAll(selector);\n    assert(elements.length, `Expected selector '${selector}' to return one or more elements`);\n    for (let element of elements) {\n      let classNames = element.className.split(/\\s+/);\n      assert(classNames.indexOf(expected) === -1,\n             message || `Expected element '${selector}' to not have class ${expected}, found ${classNames.join(', ')}`);\n    }\n  }\n\n  // Asserts the selected element(s) has the expected class names.\n  className(selector, expected, message) {\n    const elements = this.browser.queryAll(selector);\n    assert(elements.length, `Expected selector '${selector}' to return one or more elements`);\n    const array    = expected.split(/\\s+/).sort().join(' ');\n    for (let element of elements) {\n      let actual = element.className.split(/\\s+/).sort().join(' ');\n      assertMatch(actual, array,\n                  message || `Expected element '${selector}' to have class ${expected}, found ${actual}`);\n    }\n  }\n\n  // Asserts the selected element(s) has the expected value for the named style\n  // property.\n  style(selector, style, expected = null, message = null) {\n    const elements = this.browser.queryAll(selector);\n    assert(elements.length, `Expected selector '${selector}' to return one or more elements`);\n    for (let element of elements) {\n      let actual = element.style.getPropertyValue(style);\n      assertMatch(actual, expected,\n                  message || `Expected element '${selector}' to have style ${style} value of ${expected}, found ${actual}`);\n    }\n  }\n\n  // Asserts that selected input field (text field, text area, etc) has the expected value.\n  input(selector, expected = null, message = null) {\n    const elements = this.browser.queryAll(selector);\n    assert(elements.length, `Expected selector '${selector}' to return one or more elements`);\n    for (let element of elements)\n      assertMatch(element.value, expected, message);\n  }\n\n  // Asserts that a link exists with the given text and URL.\n  link(selector, text, url, message) {\n    const elements = this.browser.queryAll(selector);\n    assert(elements.length, message || `Expected selector '${selector}' to return one or more elements`);\n    const matchingText = elements.filter(element => element.textContent.trim() === text);\n    if (isRegExp(url)) {\n      const matchedRegexp = matchingText.filter(element => url.test(element.href));\n      assert(matchedRegexp.length, message || `Expected at least one link matching the given text and URL`);\n    } else {\n      const absolute    = Utils.resolveHref(this.browser.location.href, url);\n      const matchedURL  = matchingText.filter(element => element.href === absolute);\n      assert(matchedURL.length, message || `Expected at least one link matching the given text and URL`);\n    }\n  }\n\n\n  // Assert that text content of selected element(s) matches expected string.\n  //\n  // You can also call this with a regular expression, or a function.\n  text(selector, expected, message) {\n    const elements = this.browser.queryAll(selector);\n    assert(elements.length, `Expected selector '${selector}' to return one or more elements`);\n    const actual = elements\n      .map(elem => elem.textContent)\n      .join('')\n      .trim()\n      .replace(/\\s+/g, ' ');\n    assertMatch(actual, expected || '', message);\n  }\n\n\n  // -- Window --\n\n  // Asserts that selected element has the focus.\n  hasFocus(selector, message) {\n    if (selector) {\n      const elements = this.browser.queryAll(selector);\n      assert.equal(elements.length, 1,\n                   message || `Expected selector '${selector}' to return one element`);\n      assert.equal(this.browser.activeElement, elements[0],\n                   message || `Expected element '${selector}' to have the focus'`);\n    } else\n      assert.equal(this.browser.activeElement, this.browser.body,\n                   message || 'Expected no element to have focus');\n  }\n\n\n  // -- JavaScript --\n\n  // Evaluates Javascript expression and asserts value.  With one argument,\n  // asserts that the expression evaluates to (JS) true.\n  evaluate(expression, expected, message) {\n    const actual = this.browser.evaluate(expression);\n    if (arguments.length === 1)\n      assert(actual);\n    else\n      assertMatch(actual, expected, message);\n  }\n\n  // Asserts that the global (window) property name has the expected value.\n  global(name, expected, message) {\n    const actual = this.browser.window[name];\n    if (arguments.length === 1)\n      assert(actual);\n    else\n      assertMatch(actual, expected,\n                  message || `Expected global ${name} to have the value '${expected}', found '${actual}'`);\n  }\n\n};\n\n"],"sourceRoot":"/source/"}