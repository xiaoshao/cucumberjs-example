{"version":3,"sources":["tabs.js"],"names":[],"mappings":"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","file":"tabs.js","sourcesContent":["// Tab management.\n\nconst createHistory = require('./history');\n\n\nmodule.exports = function createTabs(browser) {\n  const tabs = [];\n  let current = null;\n\n  Object.defineProperties(tabs, {\n\n    // current property has a fancy setter\n    current: {\n      get() {\n        return current;\n      },\n      set(window) {\n        window = tabs.find(window) || window;\n        if (!~tabs.indexOf(window))\n          return;\n        if (window && window !== current) {\n          if (current)\n            browser.emit('inactive', current);\n          current = window;\n          browser.emit('active', current);\n        }\n      }\n    },\n\n    // Dump list of all open tabs to stdout or output stream.\n    dump: {\n      value(output = process.stdout) {\n        if (tabs.length === 0)\n          output.write('No open tabs.\\n');\n        else\n          for (let window of tabs)\n            output.write(`Window ${window.name || 'unnamed'} open to ${window.location.href}\\n`);\n      }\n    },\n\n    // Opens and returns a tab.  If an open window by the same name already exists,\n    // opens this window in the same tab.  Omit name or use '_blank' to always open\n    // a new tab.\n    //\n    // name    - Window name (optional)\n    // opener  - Opening window (window.open call)\n    // referer - Referrer\n    // url     - Set document location to this URL upon opening\n    // html    - Document contents (browser.load)\n    open: {\n      value(options = {}) {\n        let { name, url } = options;\n\n        // When window changes we need to change tab slot. We can't keep the index\n        // around, since tab order changes, so we look up the currently known\n        // active window and switch that around.\n        let active = null;\n\n        // If name window in open tab, reuse that tab. Otherwise, open new window.\n        const named = name && this.find(name.toString());\n        if (named) {\n          // Select this as the currenly open tab. Changing the location would then\n          // select a different window.\n          tabs.current = named;\n          if (url)\n            current.location = url;\n          return current;\n        } else {\n          if (name === '_blank' || !name)\n            name = '';\n\n          const open = createHistory(browser, focus);\n          options.url = url;\n          const window = open(options);\n          this.push(window);\n          if (name && (this.propertyIsEnumerable(name) || !this[name]))\n            this[name] = window;\n          active = window;\n          // Select this as the currenly open tab\n          tabs.current = window;\n          return window;\n        }\n\n        function focus(window) {\n          if (window && window !== active) {\n            const index = tabs.indexOf(active);\n            if (~index)\n              tabs[index] = window;\n            if (current === active)\n              tabs.current = window;\n            active = window;\n          }\n          browser._eventLoop.setActiveWindow(window);\n        }\n\n      }\n    },\n\n    // Index of currently selected tab.\n    index: {\n      get() {\n        return this.indexOf(current);\n      }\n    },\n\n    // Returns window by index or name. Use this for window names that shadow\n    // existing properties (e.g. tabs['open'] is a function, use\n    find: {\n      value(name) {\n        if (tabs.propertyIsEnumerable(name))\n          return tabs[name];\n        for (let window of this)\n          if (window.name === name)\n            return window;\n        return null;\n      }\n    },\n\n    // Close an open tab.  With no arguments, closes the currently open tab.  With\n    // one argument, closes the tab for that window.  You can pass a window, window\n    // name or index number.\n    close: {\n      value(window) {\n        if (!window)\n          window = current;\n        else\n          window = this.find(window) || window;\n        if (~this.indexOf(window))\n          window.close();\n      }\n    },\n\n    // Closes all open tabs/windows.\n    closeAll: {\n      value() {\n        const windows = this.slice(0);\n        for (let window of windows)\n          window.close();\n      }\n    }\n\n  });\n\n  // We're notified when window is closed (by any means), and take that tab out\n  // of circulation.\n  browser.on('closed', function(window) {\n    const index = tabs.indexOf(window);\n    if (~index) {\n      browser.emit('inactive', window);\n      tabs.splice(index, 1);\n      if (tabs.propertyIsEnumerable(window.name))\n        delete tabs[window.name];\n      // If we closed the currently open tab, need to select another window.\n      if (window === current) {\n        // Don't emit inactive event for closed window.\n        if (index > 0)\n          current = tabs[index - 1];\n        else\n          current = tabs[0];\n        if (current)\n          browser.emit('active', current);\n      }\n    }\n  });\n\n  return tabs;\n};\n\n"],"sourceRoot":"/source/"}